name: update_cloudflare_dns_record

description: This action creates or updates a record in a provided DNS zone on Cloudflare.

inputs:
  CF_API_TOKEN:
    description: 'Cloudflare API token'
    required: true
    type: string
  CF_ZONE_ID:
    description: 'Cloudflare DNS Zone ID'
    required: true
    type: string
  CF_RECORD_PROXIED:
    description: 'Set to true to enable Cloudflare proxy'
    required: false
    type: string
    default: "false"
  CF_RECORD_NAME:
    description: 'DNS record name (e.g., subdomain.example.com)'
    required: true
    type: string
  CF_RECORD_TYPE:
    description: 'DNS record type (e.g., A, CNAME, TXT)'
    required: true
    type: string
  CF_RECORD_VALUE:
    description: 'DNS record value (e.g., 192.0.2.1, domain.com)'
    required: true
    type: string
  CF_RECORD_TTL:
    description: 'CF_RECORD_TTL value for DNS record in seconds'
    required: false
    type: string
    default: "1" # CF_RECORD_TTL=1 sets CF_RECORD_TTL to "Auto"

runs:
  using: composite
  steps:
    - name: Create or update DNS record
      shell: bash
      run: |
          echo "Creating or updating existing DNS record..."
          curl -s \
            -H "Authorization: Bearer ${{ inputs.CF_API_TOKEN }}" \
            -H "Content-Type: application/vnd.api+json" \
            -X POST "https://api.cloudflare.com/client/v4/zones/${{ inputs.CF_ZONE_ID }}/dns_records" \
            --data "{\"type\":\"${{ inputs.CF_RECORD_TYPE }}\",\"name\":\"${{ inputs.CF_RECORD_NAME }}\",\"content\":\"${{ inputs.CF_RECORD_VALUE }}\",\"ttl\":${{ inputs.CF_RECORD_TTL }},\"proxied\":${{ inputs.CF_RECORD_PROXIED }}}"
    - name: Get result
      shell: bash
      run: |
        RESULT=$(curl -s \
          -H "Authorization: Bearer ${{ inputs.CF_API_TOKEN }}" \
          -H "Content-Type: application/vnd.api+json" \
          "https://api.cloudflare.com/client/v4/zones/${{ inputs.CF_ZONE_ID }}/dns_records?name=${{ inputs.CF_RECORD_NAME }}.jlv6.com")

        echo "DNS Update Response: "
        echo "$RESULT" | jq .

        if [[ $(echo "$RESULT" | jq -r '.result | length') -eq 0 ]]; then
          echo "No DNS record found for the specified name. Exiting."
          exit 1
        else
          echo "DNS record created or updated: ${{ inputs.CF_RECORD_NAME }}:${{ ${{ inputs.CF_RECORD_VALUE }}"
        fi
